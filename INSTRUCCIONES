1.- Ejecutamos en el terminal npm install --save express para instalar express

2.- En el json.package agregar esta seccion entre scripts y devdependencies para agregar express como dependencia:
 "dependencies": {
    "express": "^4.16.2"
  },
  Si ya la tienes puesta, lo dejas como está

3.- Introducimos este codigo en index.js:
//Importamos la libreria de express
import express from 'express'

//Cargamos una instancia de express dentro de una variable
const app = express()

//Definimos una ruta a la que se accede mediante el metodo get y esta en el raiz
//Recibe dos pàrametros, request y response
app.get('/', (req, res) => {
  //Escribimos cuando el usuario entra un hola mundo para verificar que se está renderizando correctamente
  res.end('Hola Mundo!')
})

//Le decimos a express que escuche el puerto 9000
app.listen('9000', () => {
  //Cuando el servidor arranca nos mostrará el siguiente mensaje
  console.log('Server opened listen on http://localhost:9000')
})

4.- Ejecutamos npm run start. El terminal debería de avisarnos de que el servidor está arrancado

5.- Accedemos en el navegador a la url http://localhost:9000. Deberiamos recibir el mensaje de Hola Mundo

6.- Ahora que ya está funcionando, vamos a configurarlo. Primero tendremos que instalar 
morgan con el siguiente comando: npm install --save-dev morgan. Tambien tenemos que instalar 
body-parser con este comando: npm install --save body-parser

7.- Metemos este código en index.js:
//Importamos la libreria de express
import express from 'express'
//Importamos body-parser.Es un middleware que parsea de forma automatica la respuesta del servidor
//metiendola en un campo body dentro del response
import bodyParser from 'body-parser'
//Importamos la libreria morgan. Morgan esta pensado como middleware
import logger from 'morgan'

//Cargamos una instancia de express dentro de una variable
const app = express()

//Desactivar el aviso de que nuestra web esta hecho con express en la cabecera del servidor
app.disable('x-powered-by')

//Le definimos que en el entorno en el que estamos es development
app.set('env', 'development')

//Genera un log que nos dará una serie de datos en el servidor. Combined es el tipo de log
app.use(logger('combined'))
//Le decimos que use body-parser y que devuelva un json
app.use(bodyParser.json())
//Le decimos que el codificado no sea extendido
app.use(bodyParser.urlencoded({ extended: false }))

//Definimos una ruta a la que se accede mediante el metodo get y esta en el raiz
//Recibe dos pàrametros, request y response
app.get('/', (req, res) => {
  //Cuando el servidor arranca nos mostrará el siguiente mensaje
  res.end('Hola Mundo!')
})

//Le decimos a express que escuche el puerto 9000
app.listen('9000', () => {
  //Cuando el servidor arranca nos mostrará el siguiente mensaje
  console.log('Server opened listen on http://localhost:9000')
})

8.- Ejecutamos npm run start. El terminal debería de avisarnos de que el servidor está arrancado

9.- Accedemos en el navegador a la url http://localhost:9000. Deberiamos recibir el mensaje de Hola Mundo

10.- Vamos a añadir un template en pug. Para ello, instalamos pug con el siguiente comando en terminal:
npm install --save pug

11.- Creamos dentro de src un directorio llamado views

12.- Dentro de el creamos el archivo home.pug con este codigo:
html
  head
    title Curso NodeJS de OpenWebinars!
  body
    h1 Curso NodeJS de OpenWebinars!

También creamos un archivo homeVars.pug con este codigo:
html
  head
    title!= title
  body
    h1!= message

13.- Cambiamos el codigo de index.js por este:
//Importamos la libreria de express
import express from 'express'
//Importamos body-parser.Es un middleware que parsea de forma automatica la respuesta del servidor
//metiendola en un campo body dentro del response
import bodyParser from 'body-parser'
//Importamos la libreria morgan. Morgan esta pensado como middleware
import logger from 'morgan'
//Importamos la libreria requerida para rutas
import path from 'path'

//Cargamos una instancia de express dentro de una variable
const app = express()

//Desactivar el aviso de que nuestra web esta hecho con express en la cabecera del servidor
app.disable('x-powered-by')

//Le definimos que en el entorno en el que estamos es development
app.set('env', 'development')

//Genera un log que nos dará una serie de datos en el servidor. Combined es el tipo de log
app.use(logger('combined'))
//Le decimos que use body-parser y que devuelva un json
app.use(bodyParser.json())
//Le decimos que el codificado no sea extendido
app.use(bodyParser.urlencoded({ extended: false }))

//Le decimos en que ruta están las vistas a utilizar. Este será el resultado de concatenar
//el directorio actual en el que estamos mas views
app.set('views', path.join(__dirname, 'views'))
//Le definimos que el motor de plantillas a utilizar (view engine). En este caso es pug
app.set('view engine', 'pug')

//Definimos una ruta a la que se accede mediante el metodo get y esta en el raiz
//Recibe dos pàrametros, request y response
app.get('/', (req, res) => {
  //Buscará e intentará renderizar un archivo home.pug
  res.render('home')
  //Renderizamos homeVars.pug pasandole las variables title y message
  //res.render('homeVars', { title: 'Open Webinars!', message: 'Curso NodeJS!' })
})

//Le decimos a express que escuche el puerto 9000
app.listen('9000', () => {
  //Cuando el servidor arranca nos mostrará el siguiente mensaje
  console.log('Server opened listen on http://localhost:9000')
})

En app.get será donde ejecutaremos el render de la plantilla. Se puede hacer de dos maneras:
de forma fija (esta activo en el codigo con res.render('home')) o con variables que recibe 
(esta comentado en el codigo res.render('homeVars', { title: 'Open Webinars!', message: 'Curso NodeJS!' }))

14.- Ejecutamos npm run start para iniciar el servidor y accedemos a la url http://localhost:9000

15.- Ahora añadiremos mas rutas para probar. Para ello, insertaremos este código antes del listen:
//Ejemplo de ruta a raiz escribiendo codigo html y con enlace a nueva ruta
app.get('/', (req, res, next) => {
    res.write(`
      <h1>Mi primera página en Node!</h1>
      <a href="/indice">Indice</a>
    `)
    res.end()
  })
  
  //Ejemplo de ruta dentro de raiz
  app.get('/indice', (req, res, next) => {
    res.write(`
      <h1>Mi primera página en Node!</h1>
      <h2>Indice de la web</h2>
    `)
    res.end()
  })

  Después solo hay que ejecutar npm run start y acceder a la url para ver los resultados

16.- Creamos dentro de la carpeta de vistas (views) otra carpeta include donde introduciremos
footer.pug, head.pug y header.pug que serán los bloques que usaremos en las páginas. 
Los fuentes de esos archivos a continuación
  //footer.pug
  footer.footer
  .container
    p Fernando Beltran Brandez

  //head.pug
  head
  meta(charset='utf-8')
  title!= title
  meta(
    name='viewport'
    content='width=device-width, initial-scale=1.0'
  )

  //header.pug
  nav.navbar.navbar-expand-md.navbar-dark.fixed-top.bg-dark
  a.navbar-brand(href='#') Navbar
  button.navbar-toggler(type='button', data-toggle='collapse', data-target='#navbarNav', aria-controls='navbarNav', aria-expanded='false', aria-label='Toggle navigation')
    span.navbar-toggler-icon
  #navbarNav.collapse.navbar-collapse
    ul.navbar-nav
      li.nav-item
        a.nav-link(href='/') Home
      li.nav-item
        a.nav-link(href='/temario') Temario
main(role='main')
  .jumbotron
    .container
      h1.display-3 NodeJS
      p Iniciacion de NodeJS donde estamos creando un servidor en Express

Estos archivos serán los layouts que llamaremos desde las vistas.

17.- Creamos las vistas (layouts) que llamaran a esos bloques. Estos serán la página inicial (home.pug) 
y la subpagina temario (temario.pug). Estos son sus fuentes:
//home.pug
html
  include includes/head.pug
  body
    include includes/header.pug
    .container
      h1.bd-title!= message
      p.bd-lead Node.js es un entorno en tiempo de ejecución, multiplataforma. Esta especializado en I/O (entrada/salida) en una arquitectura orientada a eventos, asíncrono y creado con el motor de Javascript V8, de Chrome, nos permite desarrollar aplicaciones de servidor utilizando ECMAScript, por lo que no necesitamos de un navegador web para ejecutar dicho código. Extendido y utilizado en muchísimos proyectos, debido a su versatilidad, gran comunidad y cantidad de paquetes desarrollados por terceros, que se pueden utilizar en nuestro desarrollo, se está convirtiendo en una de las plataformas más extendidas y utilizadas en el mundo web, pero no solo se utiliza para el desarrollo web (back o front), si no que también es utilizado para temas de IOT, y demás.
    include includes/footer.pug

//temario.pug
html
  include includes/head.pug
  body
    include includes/header.pug
    .container
      h1.bd-title!= message

    .container
      .row
        .col-md-4
          h5 Introducción a Node.js
          ol
            li ¿Qué es Node.js?
            li ¿Y NPM?
            li ¿Qué podemos hacer con Node.js?
            li Características de Node.js
            li  Instalación
            li Comunidad y ecosistema
            li Hola Mundo!
        .col-md-4
          h5 Ecmascript
          ol
            li Nuevas features
            li Babel
        .col-md-4
          h5 Node.js
          ol
            li Manejo de eventos
            li Programación asíncrona
            li Modularización
            li Introducción a Sockets
            li Manejo de errores
            li Nodemon

        .col-md-4
          h5 Nuestro primer servidor web
          ol
            li Módulo HTTP
            li Un servidor básico
            li El objeto response
            li Encabezados
            li Nuestra home!
            li Vitaminémos nuestra home!

        .col-md-4
          h5 Conexión a base de datos
          ol
            li MongoDB
            li PostgresSQL

        .col-md-4
          h5 Express
          ol
            li ¿Qué es Express?
            li Un poco de historia, y comunidad
            li Middlewares

        .col-md-4
          h5 Renderizado desde el servidor
          ol
            li Nuestro primer servidor
            li Configuremos nuestro servidor
            li Trabajando con templates
            li Routing
            li Layouts
            li Ficheros estáticos
            li Rutas parametrizables
            li Manejo de errores en express
            li Modularización
            li Testing de nuestra web

        .col-md-4
          h5 Nuestra primera Rest
          ol
            li ¿Qué es REST?
            li Nuestro primer servidor
            li Configuremos nuestra API
            li Configurando el entorno (dev o prod)
            li Routing
            li Modularización
            li Securizando nuestra API
            li Testeando nuestra API Rest!

        .col-md-4
          h5 Sockets!
          ol
            li ¿Qué es, y para qué sirven los sockets?
            li Implementación básica

        .col-md-4
          h5 Producción
          ol
            li Despleguemos nuestra web/API!

        .col-md-4
          h5 Bonus!
          ol
            li Dockerizando nuestro servidor!

    include includes/footer.pug

18.- Introduciremos este código en index.js:
//RUTAS
app.get('/', (req, res, next) => {
    res.render('home', {
      title: 'NodeJS',
      message: 'Inicio en NodeJS y pruebas!'
    })
  })
  
  app.get('/temario', (req, res, next) => {
    res.render('temario', {
      title: 'NodeJS'
    })
  })

19.- Ejecutamos npm run start en el terminal y accedemos a http://localhost:9000 para ver los resultados